fn gdc(a, b) {
  while(b!=0) {
    t = b;
    b = a % b;
    a = t;
  };
  a
};

fn findPow(x, z) {
  y = 1;
  while (pow(x, y) % z != 1) {
    y = y + 1;
  };
  y
};

fn shor(x) {
  a = 2;
  while (a < x) {
    if (gdc(a,x) == 1) {
      r = findPow(a, x);
      p = gdc(pow(a, r/2) + 1, x);
      q = gdc(pow(a, r/2) - 1, x);
      if (p*q == x) {
        return "[ " + p + ", " + q +" ]";
      };
    };
    a = a + 1;
  };
  ''
};

fn pow_mod(a, e, m) {
  res = 1;
  base = a % m;
  while (e > 0) {
    if (e % 2 == 1) { res = (res * base) % m; };
    base = (base * base) % m;
    e = e / 2;
  };
  res
};


x = 21;
y = 49;
print("gdc("+x+","+y+") = " + gdc(x,y));
print("shor(15) = " + shor(15));
assert(gdc(15, 21) == 3);
assert(shor(15) == "[ 5, 3 ]");
0
